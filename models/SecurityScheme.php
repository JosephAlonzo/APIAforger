<?php 
namespace Models;


class SecurityScheme extends Base
{
    /**
     *  REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
     *  Applies To Any
     */
    public string $type;
    /**
     *  A short description for security scheme. CommonMark syntax MAY be used for rich text representation
     *  Applies To Any
     */
    public string $description;
    /**
     *  REQUIRED. The name of the header, query or cookie parameter to be used.
     *  Applies To apiKey
     */
    public string $name;
    /**
     *  REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
     *  Applies To apiKey
     */
    public string $in;
    /**
     *  REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
     *  The values used SHOULD be registered in the IANA Authentication Scheme registry.
     *  Applies To http
     */
    public string $scheme;
    /**
     *  A hint to the client to identify how the bearer token is formatted. 
     *  Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
     *  Applies To http with scheme("bearer")
     */
    public string $bearerFormat;
    /**
     * 	REQUIRED. An object containing configuration information for the flow types supported.
     *  Applies To oauth2
     */
    public OAuthFlows $flows;
    /**
     * REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL
     * Applies To openIdConnect
     */
    public string $openIdConnectUrl;

    function __construct(string $type = "")
    {
        $this->type = $type;
        $this->modelProperties = [
            "type"
        ];
        $this->requiredProperties = [ "type" ];
    }

    protected function isValidType(){
        $acceptedValues = [ "apiKey", "http", "oauth2", "openIdConnect" ];
        if( !in_array( $this->type, $acceptedValues ) )
            return [ "success" => false, "message" => "type MUST have value apiKey|http|oauth2|openIdConnect" ];

        $propertiesRequired = [];
        switch ($this->type) {
            case 'apiKey':
                $propertiesRequired = ["name", "in"];
                break;
            case 'http':
                $propertiesRequired = ["scheme"];
                break;
            case 'oauth2':
                $propertiesRequired = ["flows"];
                break;
            case 'openIdConnect':
                $propertiesRequired = ["openIdConnectUrl"];
                break;
            default:
                break;
        }
        array_push($this->modelProperties, ...$propertiesRequired);
        array_push($this->required, ...$propertiesRequired);

        return ["success" => true ];
    }

    protected function isValidIn(){
        $acceptedValues = ["query", "header", "cookie"];
        if( !in_array($this->in, $acceptedValues)) 
            return [ "success" => false, "message" => "In MUST have value query|header|cookie" ];
        return ["success" => true ];
    }
    /**
     * see more about accepted values http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml
     */
    protected function isValidScheme(){
        $acceptedValues = ["Basic", "Bearer", "Digest", "HOBA", "Mutual", "Negotiate", "OAuth", "SCRAM-SHA-1", "SCRAM-SHA-256", "vapid"];
        if( !in_array($this->scheme, $acceptedValues)) 
            return [ "success" => false, "message" => "In MUST have value Basic|Bearer|Digest|HOBA|Mutual|Negotiate|OAuth|SCRAM-SHA-1|SCRAM-SHA-256|vapid" ];
        if($this->scheme == "Bearer")
            array_push($this->modelProperties, "bearerFormat");
        return ["success" => true ];
    }
    /**
     * A hint to the client to identify how the bearer token is formatted. 
     * Bearer tokens are usually generated by an authorization server, 
     * so this information is primarily for documentation purposes.
     */
    protected function isValidBearerFormat(){
        return ["success" => true ];
    }

    protected function isValidFlows(){
        if ( !$this->flows->isValid() ) 
            return [ "success" => false, "message" => "flows is not a valid OAuth Flows Object" ];
        return ["success" => true ];
    }

    protected function isValidOpenIdConnectUrl(){
        if ( $this->isValidURLFormat($this->openIdConnectUrl) )
            return [ "success" => false, "message" => "OpenIdConnectUrl MUST be a url valid format" ];

        return ["success" => true ];
    }

}
